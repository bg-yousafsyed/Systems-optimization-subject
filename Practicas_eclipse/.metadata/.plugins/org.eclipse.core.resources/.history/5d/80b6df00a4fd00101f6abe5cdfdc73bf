package Application;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.StringTokenizer;

public class MMDPInstance {

	private File file;
	private int n;
	private int m;
	private double [][] matrixDistance;

	public MMDPInstance(File fichero) {
		
		this.file = fichero;
		
	}

	public void loading() {
		
		try {
			
			BufferedReader br = new BufferedReader(new FileReader(file));
			String line = br.readLine();
			StringTokenizer st = new StringTokenizer(line);
			n = Integer.parseInt(st.nextToken());
			m = Integer.parseInt(st.nextToken());
			matrixDistance = new double[n][n];
			
			line = br.readLine();
			
			while(line != null) {
				
				st = new StringTokenizer(line);
				int x = Integer.parseInt(st.nextToken());
				int y = Integer.parseInt(st.nextToken());
				double distance = Double.parseDouble(st.nextToken());
				matrixDistance[x][y] = distance;
				matrixDistance[y][x] = distance;
				line = br.readLine();
			}
			
			br.close();
			
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}

	public void print() {
		
		System.out.println(file.getName());
		System.out.println(n + " " + m);
		
		for (int i = 0; i < matrixDistance.length - 1; i++) {
			
			for (int j = i + 1; j < matrixDistance.length; j++) {
				System.out.println(i + " " + j + " " + matrixDistance[i][j]);
			}
			
		}
	}
	
	public int getNumNodesSelection (){
		return m;
	}
	
	public int getNumNodes (){
		return n;
	}
	
	public double getValueObjetiveFunction(SolutionMMDP solution){
		 
		 if (!solution.isFactible())
			 return Double.MIN_VALUE;
		 
		 double valueObjetiveFunction = 0.0;

		 for (int nodeSelection = 0; nodeSelection < n; nodeSelection ++){
			 if (solution.getSolution()[nodeSelection]){
				 // Distance with adyacents
				 for (int otherNode = 0; otherNode < n; otherNode ++){
					 if ((nodeSelection != otherNode) && (matrixDistance[nodeSelection][otherNode] != 0)){
						 valueObjetiveFunction += matrixDistance[nodeSelection][otherNode];
					 }
				 }
			 }
		 }
		 
		 return valueObjetiveFunction;
	}
	
	public boolean bestValueObjetiveFunction (double valueBest, double otherValue){
		
		// Maximun value
		if (valueBest < otherValue)
			return true;
		
		return false;
	}
}
